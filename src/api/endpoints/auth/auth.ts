/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Code Dual API
 * The Code Dual API description
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  AccessTokenDto,
  RegisterDto,
  SignInDto
} from '../../models'
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';



export const signIn = (
    signInDto: SignInDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<AccessTokenDto>(
      {url: `/api/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signInDto, signal
    },
      );
    }
  


export const getSignInMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signIn>>, TError,{data: SignInDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof signIn>>, TError,{data: SignInDto}, TContext> => {
    
const mutationKey = ['signIn'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof signIn>>, {data: SignInDto}> = (props) => {
          const {data} = props ?? {};

          return  signIn(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SignInMutationResult = NonNullable<Awaited<ReturnType<typeof signIn>>>
    export type SignInMutationBody = SignInDto
    export type SignInMutationError = ErrorType<unknown>

    export const useSignIn = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signIn>>, TError,{data: SignInDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof signIn>>,
        TError,
        {data: SignInDto},
        TContext
      > => {

      const mutationOptions = getSignInMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const register = (
    registerDto: RegisterDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerDto, signal
    },
      );
    }
  


export const getRegisterMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof register>>, TError,{data: RegisterDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof register>>, TError,{data: RegisterDto}, TContext> => {
    
const mutationKey = ['register'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof register>>, {data: RegisterDto}> = (props) => {
          const {data} = props ?? {};

          return  register(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterMutationResult = NonNullable<Awaited<ReturnType<typeof register>>>
    export type RegisterMutationBody = RegisterDto
    export type RegisterMutationError = ErrorType<unknown>

    export const useRegister = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof register>>, TError,{data: RegisterDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof register>>,
        TError,
        {data: RegisterDto},
        TContext
      > => {

      const mutationOptions = getRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    