/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Code Dual API
 * The Code Dual API description
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  GameDto
} from '../../models'
import { customInstance } from '../../custom-instance';
import type { ErrorType } from '../../custom-instance';



export const createGame = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<GameDto>(
      {url: `/api/game`, method: 'POST', signal
    },
      );
    }
  


export const getCreateGameMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGame>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createGame>>, TError,void, TContext> => {
    
const mutationKey = ['createGame'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createGame>>, void> = () => {
          

          return  createGame()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateGameMutationResult = NonNullable<Awaited<ReturnType<typeof createGame>>>
    
    export type CreateGameMutationError = ErrorType<unknown>

    export const useCreateGame = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGame>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createGame>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCreateGameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const shareCode = (
    gameId: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/game/share-code/${gameId}`, method: 'PUT'
    },
      );
    }
  


export const getShareCodeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof shareCode>>, TError,{gameId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof shareCode>>, TError,{gameId: string}, TContext> => {
    
const mutationKey = ['shareCode'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof shareCode>>, {gameId: string}> = (props) => {
          const {gameId} = props ?? {};

          return  shareCode(gameId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ShareCodeMutationResult = NonNullable<Awaited<ReturnType<typeof shareCode>>>
    
    export type ShareCodeMutationError = ErrorType<unknown>

    export const useShareCode = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof shareCode>>, TError,{gameId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof shareCode>>,
        TError,
        {gameId: string},
        TContext
      > => {

      const mutationOptions = getShareCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    